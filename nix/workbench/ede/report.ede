#+CONSTANTS: {{ summary.dataRef }}={{ summary.orgFile }}{% for sec in analyses %} {{ sec.value.dataRef }}={{ sec.value.orgFile }} {% endfor %}
#+CONSTANTS: base=../../{{ base.meta.tag }}/analysis
{% for run in runs %}
#+CONSTANTS: run{{ run.index }}=../../{{ run.value.meta.tag }}/analysis
{% endfor %}
#+LATEX_CLASS: report
#+LATEX_CLASS_OPTIONS: [a4paper,7pt]
#+LATEX_HEADER: \usepackage[margin=0.5in]{geometry}
#+latex_header: \usepackage{setspace}
#+latex_header: \onehalfspacing
#+LATEX_COMPILER: xelatex
#+EXPORT_FILE_NAME: {{ report.tag }}.{{ base.fileInfix }}.pdf
#+TITLE: {{ report.target }} against {{ base.ver }}
#+SUBTITLE: {{ base.workload }} workload
#+AUTHOR: {{ report.author }}, Cardano Performance team
#+DATE: {{ report.date }}

#+BEGIN_COMMENT
Hints:

1. C-c C-x C-x :: recompute & redraw everything: tables & Gnuplot charts
2. C-c C-x x   :: rerun a single Gnuplot script & redraw its chart
2. C-c C-e l o :: export to PDF, and open the result.
3. C-c C-c     :: recompute individual tables (several times for large tables)
4.   Yes, you can edit individual Gnuplot chart definitions and rerender,
   before exporting to the document.
5.   PDF export fails?  Likely some Gnuplot scripts failed to produce images.
   Either fix these scripts, or remove them entirely -- then retry export.
6.   If you reanalyse any constituent runs,
   you'll need to delete all buffers inside this Emacs process
   (M-Shift-Space, then d each buffer, then x),
   otherwise the reanalysed tables will not propagate to this Org file.
#+END_COMMENT

*** Manifest

We compare {% for run in runs %}{%if !run.first%}{%if !run.last%}, {%else%} and {%endif%}{%endif%}={{ run.value.ver }}= ({{ run.value.meta.era | toTitle }}){% endfor %} relative to ={{ base.ver }}= ({{ base.meta.era | toTitle }}), under {{ base.workload }} workload.

{% include "table.ede" with table = summary %}

*** Analysis
{% for sec in analyses %}
***** {{ sec.value.title }}

{% include "tablevars-delta-pct.ede" with table = sec.value %}

{% endfor %}

*** Observations
***** Resources

1. ...

***** Forging

1. ...

***** Peer propagation

1. ...

***** End-to-end propagation

1. ...

* Appendix A: charts

*** Cluster performance charts

{% for m in charts %}
    - {{ m.value.deShortDesc }} ({{ m.value.deField }}) :: {{ m.value.deDescription }}
      {%include "chart.ede" with args= m.value %}
{% endfor %}

* Appendix B: data dictionary

*** Block propagation metrics
{% for m in dictionary.dBlockProp %}
    - {{ m.value.deShortDesc }} ({{ m.value.deField }}) :: {{ m.value.deDescription }}
{% endfor %}

*** Cluster performance metrics
{% for m in dictionary.dClusterPerf %}
    - {{ m.value.deShortDesc }} ({{ m.value.deField }}) :: {{ m.value.deDescription }}
{% endfor %}
